const express = require("express");
const path = require("path");
const session = require("express-session");
const cookieParser = require("cookie-parser");
const port = 3000;
const sqlite3 = require('sqlite3').verbose();

// Creating the Express server
const app = express();

// Connect to SQLite database
let db = new sqlite3.Database('project.db', (err) => {
    if (err) {
        return console.error(err.message);
    }
    console.log('Connected to the SQlite database.');
});


// Middleware setup
app.use(cookieParser());
app.use(session({
  secret: 'your-secret-key-for-your-store', 
  resave: false,
  saveUninitialized: true,
  cookie: { maxAge: 10 * 60000 } 
}));

app.set('view engine', 'ejs');
app.use(express.static(path.join(__dirname, 'public')));


// static resourse & templating engine
app.use(express.static(path.join(__dirname, 'public')));
// Set EJS as templating engine
app.set('view engine', 'ejs');

app.use(express.json())
app.use(express.urlencoded({ extended: true }))


function getLang(req) {
  return req.cookies.lang || "th"; // default = р╣Др╕Чр╕в
}


// р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕ар╕▓р╕йр╕▓
app.get("/lang/:lng", (req, res) => {
    res.cookie("lang", req.params.lng, { maxAge: 1000 * 60 * 60 * 24 }); // р╣Ар╕Бр╣Зр╕Ъ 1 р╕зр╕▒р╕Щ
    res.redirect("/");; // р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╣Ар╕Фр╕┤р╕б
});



app.get("/", (req, res) => {
    const lang = getLang(req);
  res.render('home', { lang, order_type: req.session.order_type });
});

app.get('/order-type', (req, res) => {
  const t = req.query.order_type === 'TAKEAWAY' ? 'TAKEAWAY' : 'DINE_IN';
  req.session.order_type = t;
  res.redirect('/main');
});

// path р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕З
app.get('/main', function (req, res) {

    const lang = getLang(req);
    const nameCol = lang === "th" ? "name_thai" : "name_eng";
    const detailCol = lang === "th" ? "detail" : "detail_eng";

    const query = `SELECT menu_item_id,base_price,category_id,name_eng, category_id, ${nameCol} AS name, ${detailCol} AS detail, base_price 
                 FROM MenuItem`;
    db.all(query, (err, rows) => {
        if (err) {
            console.log(err.message);
        }
        res.render('main_menu', { data: rows, lang });
    });
});


// path р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕З
app.get('/menu', function (req, res) {
    const lang = getLang(req);
    const nameCol = lang === "th" ? "name_thai" : "name_eng";
    const detailCol = lang === "th" ? "detail" : "detail_eng";

    const query = `SELECT menu_item_id,base_price,category_id,name_eng ,category_id, ${nameCol} AS name, ${detailCol} AS detail, base_price 
                 FROM MenuItem`;
    db.all(query, (err, rows) => {
        if (err) {
            console.log(err.message);
        }
        console.log(rows);
        res.render('menu', { data: rows, lang });
    });
});

// path р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И PASTA & RICE
app.get('/pasta', function (req, res) {
    const lang = getLang(req);
    const nameCol = lang === "th" ? "name_thai" : "name_eng";
    const detailCol = lang === "th" ? "detail" : "detail_eng";

    const query = `SELECT menu_item_id, category_id, ${nameCol} AS name, ${detailCol} AS detail, base_price 
                 FROM MenuItem WHERE category_id = 2`;
    db.all(query, (err, rows) => {
        if (err) {
            console.log(err.message);
        }
        console.log(rows);
        res.render('menu_pasta', { data: rows, lang });
    });
});

// path р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И Steak
app.get('/steak', function (req, res) {
    const lang = getLang(req);
    const nameCol = lang === "th" ? "name_thai" : "name_eng";
    const detailCol = lang === "th" ? "detail" : "detail_eng";

    const query = `SELECT menu_item_id, category_id, ${nameCol} AS name, ${detailCol} AS detail, base_price 
                 FROM MenuItem WHERE category_id = 3`;
    db.all(query, (err, rows) => {
        if (err) {
            console.log(err.message);
        }
        console.log(rows);
        res.render('menu_steak', { data: rows, lang });
    });
});

app.listen(port, () => {
    console.log(`Starting server at port ${port}`);
});


//  р╣Ар╕Юр╕┤р╣Ир╕бр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕Хр╕░р╕Бр╕гр╣Йр╕▓

app.post("/add-to-cart", (req, res) => {
  // ЁЯУж р╕Фр╕╢р╕Зр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕бр╕▓р╕Ир╕▓р╕Бр╕Яр╕нр╕гр╣Мр╕бр╣Гр╕Щр╕лр╕Щр╣Йр╕▓ more.ejs
  // р╣Ар╕Кр╣Ир╕Щ menu_item_id = 27, quantity = 2, р╣Бр╕ер╕░ options р╕Хр╣Ир╕▓р╕З р╣Ж
  const { menu_item_id, quantity, note, ...rest } = req.body;

  // р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ session.cart тЖТ р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З array р╕зр╣Ир╕▓р╕Зр╣Др╕зр╣Йр╕Бр╣Ир╕нр╕Щ
  if (!req.session.cart) req.session.cart = [];

  // р╣Бр╕Ыр╕ер╕Зр╕Ир╕│р╕Щр╕зр╕Щр╕кр╕┤р╕Щр╕Др╣Йр╕▓ (quantity) р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╣Гр╕лр╣Йр╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ = 1
  const qty = parseInt(quantity) || 1;

  // 1: р╕гр╕зр╕Ър╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е options р╕Чр╕╡р╣Ир╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Ар╕ер╕╖р╕нр╕Б (р╕Цр╣Йр╕▓р╕бр╕╡)
  let options = [];
  for (let key in rest) {
    // р╣Ар╕Йр╕Юр╕▓р╕░ input name р╕Чр╕╡р╣Ир╕Вр╕╢р╣Йр╕Щр╕Хр╣Йр╕Щр╕Фр╣Йр╕зр╕в "options_"
    // (р╕Хр╕▒р╕зр╕Щр╕╡р╣Йр╕бр╕▓р╕Ир╕▓р╕Б input radio/checkbox р╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░ Option_Group)
    if (key.startsWith("options_")) {

      // р╣Ар╕Юр╕гр╕▓р╕░р╕Ър╕▓р╕Зр╕Бр╕ер╕╕р╣Ир╕бр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕Фр╣Йр╕лр╕ер╕▓р╕вр╕Др╣Ир╕▓ (checkbox) р╕Ър╕▓р╕Зр╕Бр╕ер╕╕р╣Ир╕бр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕Фр╣Йр╕Др╣Ир╕▓р╣Ар╕Фр╕╡р╕вр╕з (radio)
      // р╣Ар╕гр╕▓р╕Ир╕╢р╕Зр╕Хр╣Йр╕нр╕Зр╕Хр╕гр╕зр╕Ир╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щ array р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const values = Array.isArray(rest[key]) ? rest[key] : [rest[key]];

      // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕Ир╕▓р╕Б form р╕Др╕╖р╕н "102|10" тЖТ (option_value_id|extra_price)
      values.forEach((v) => {
        const [id, price] = v.split("|"); // р╣Бр╕вр╕Бр╕Др╣Ир╕▓ ID р╕Бр╕▒р╕Ър╕гр╕▓р╕Др╕▓р╕Юр╕┤р╣Ар╕ир╕й (+)
        options.push({
          option_value_id: parseInt(id),      // р╣Ар╕Бр╣Зр╕Ър╣Др╕нр╕Фр╕╡р╕Вр╕нр╕З option
          extra_price: parseFloat(price) || 0 // р╕гр╕▓р╕Др╕▓р╕Чр╕╡р╣Ир╣Ар╕Юр╕┤р╣Ир╕б (р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ = 0)
        });
      });
    }
  }
  // 2: р╕Хр╕гр╕зр╕Ир╕зр╣Ир╕▓р╕бр╕╡р╕кр╕┤р╕Щр╕Др╣Йр╕▓ "р╣Бр╕Ър╕Ър╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ" р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
  const existingItem = req.session.cart.find((item) => {
    // р╕Хр╣Йр╕нр╕Зр╕Хр╕гр╕Зр╕Чр╕▒р╣Йр╕З menu_item_id р╣Бр╕ер╕░р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б (options)
    const sameMenu = item.menu_item_id == menu_item_id;

    // р╕Хр╕гр╕зр╕Ир╕зр╣Ир╕▓ options р╣Ар╕Фр╕┤р╕бр╣Бр╕ер╕░ options р╣Гр╕лр╕бр╣Ир╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    // р╣Гр╕Кр╣Й JSON.stringify р╕лр╕ер╕▒р╕З sort р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Ыр╕▒р╕Нр╕лр╕▓р╕ер╕│р╕Фр╕▒р╕Ър╣Др╕бр╣Ир╕Хр╕гр╕З
    const sameOptions =
      JSON.stringify(item.options.sort((a, b) => a.option_value_id - b.option_value_id)) ===
      JSON.stringify(options.sort((a, b) => a.option_value_id - b.option_value_id));

    // р╕Цр╣Йр╕▓р╕Хр╕гр╕Зр╕Чр╕▒р╣Йр╕Зр╣Ар╕бр╕Щр╕╣р╣Бр╕ер╕░р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б тЖТ р╕Цр╕╖р╕нр╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Ар╕бр╕Щр╕╣р╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ
    return sameMenu && sameOptions;
  });

  // 3: р╕Цр╣Йр╕▓р╕бр╕╡р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Кр╕Щр╕┤р╕Фр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з тЖТ р╣Бр╕Др╣Ир╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕│р╕Щр╕зр╕Щ
  if (existingItem) {
    // р╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕│р╕Щр╕зр╕Щр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Гр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Щр╕▒р╣Йр╕Щ
    existingItem.quantity += qty;
  } 
  // 4: р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ тЖТ р╣Ар╕Юр╕┤р╣Ир╕бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Гр╕лр╕бр╣Ир╣Ар╕Вр╣Йр╕▓ session.cart
  else {
    req.session.cart.push({
      menu_item_id,   // р╕гр╕лр╕▒р╕кр╣Ар╕бр╕Щр╕╣
      quantity: qty,  // р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
      options,         // р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б (option group)
      note: note ? String(note).trim() : null // тЖР р╣Ар╕Бр╣Зр╕Ъ note р╕Бр╕▒р╕Ър╕гр╕▓р╕вр╕Бр╕▓р╕г
    });
  }
  // ЁЯз╛ р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕░р╕Бр╕гр╣Йр╕▓р╣Гр╕Щ console р╣Ар╕Юр╕╖р╣Ир╕н debug
  console.log("ЁЯЫТ Updated Cart:", req.session.cart);
  // тЬЕ р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕зр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б
  res.redirect("/main");
});


// -------------------------------
//  path р╕Вр╕нр╕Зр╕Хр╕░р╕Бр╕гр╣Йр╕▓р╕кр╕┤р╕Щр╕Др╣Йр╕▓
// -------------------------------
app.get("/cart", (req, res) => {
  // ЁЯФ╣ р╕Хр╕гр╕зр╕Ир╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Б (р╣Др╕Чр╕в/р╕нр╕▒р╕Зр╕Бр╕др╕й)
  const lang = getLang(req);

  // ЁЯФ╣ р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Кр╕╖р╣Ир╕н/р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Хр╕▓р╕бр╕ар╕▓р╕йр╕▓
  const nameCol = lang === "th" ? "name_thai" : "name_eng";
  const detailCol = lang === "th" ? "detail" : "detail_eng";

  // ЁЯФ╣ р╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕░р╕Бр╕гр╣Йр╕▓р╕Ир╕▓р╕Б session
  const cart = req.session.cart || [];

  // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Ар╕ер╕в тЖТ р╣Бр╕кр╕Фр╕Зр╕лр╕Щр╣Йр╕▓р╕Хр╕░р╕Бр╕гр╣Йр╕▓р╕зр╣Ир╕▓р╕З
  if (cart.length === 0) {
    return res.render("cart", { data: [], lang });
  }

  // ЁЯФ╣ р╕гр╕зр╕Ър╕гр╕зр╕б menu_item_id р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щ cart
  const ids = cart.map((i) => i.menu_item_id).join(",");

  // ЁЯФ╣ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Щр╕Др╣Йр╕▓ (р╕Кр╕╖р╣Ир╕н, р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф, р╕гр╕▓р╕Др╕▓) р╕Ир╕▓р╕Б DB
  const query = `SELECT menu_item_id, ${nameCol} AS name, ${detailCol} AS detail, base_price, category_id, name_eng 
                 FROM MenuItem WHERE menu_item_id IN (${ids})`;

  db.all(query, (err, menuRows) => {
    if (err) {
      console.error(err.message);
      return res.render("cart", { data: [], lang });
    }

    // ЁЯФ╣ р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Бр╕Ър╕Ъ 1:1 р╕Бр╕▒р╕Ър╣Гр╕Щ session
    //    р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Чр╕╡р╣И menu_id р╕Лр╣Йр╕│р╕Бр╕▒р╕Щ merge р╕гр╕зр╕бр╕Бр╕▒р╕Щ
    const merged = cart.map((c) => {
      // р╕лр╕▓р╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Бр╕Ир╕▓р╕Б DB р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╣Гр╕Щ cart
      const menu = menuRows.find((m) => m.menu_item_id == c.menu_item_id);

      // р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Чр╕▒р╣Йр╕З DB (р╕Кр╕╖р╣Ир╕н/р╕гр╕▓р╕Др╕▓) р╣Бр╕ер╕░ session (р╕Ир╕│р╕Щр╕зр╕Щ/option)
      return menu
        ? {
            ...menu,
            quantity: c.quantity,
            rawOptions: c.options, // option р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕Ир╕▓р╕Бр╕лр╕Щр╣Йр╕▓ more.ejs
            note: c.note ? String(c.note).trim() : null,  
          }
        : null;
    }).filter(Boolean); // р╕Бр╕гр╕нр╕З null р╕Цр╣Йр╕▓р╕бр╕╡р╣Ар╕бр╕Щр╕╣р╕Чр╕╡р╣Ир╕лр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕нр╣Гр╕Щ DB

    // ЁЯФ╣ р╕гр╕зр╕б option_value_id р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (р╕кр╕│р╕лр╕гр╕▒р╕Ъ query р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Кр╕╖р╣Ир╕н/р╕гр╕▓р╕Др╕▓)
    const allOptionIds = merged.flatMap((m) =>
      m.rawOptions.map((o) => o.option_value_id)
    );

    // тЬЕ р╕Бр╕гр╕Ур╕╡р╣Др╕бр╣Ир╕бр╕╡ option (р╣Ар╕Кр╣Ир╕Щ Coke, Fries)
    if (allOptionIds.length === 0) {
      merged.forEach((m) => {
        m.options = [];
        m.final_price = m.base_price;
      });
      return res.render("cart", { data: merged, lang });
    }

    // ЁЯФ╣ Query option_value р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕нр╕▓р╕Кр╕╖р╣Ир╕нр╣Др╕Чр╕в/р╕нр╕▒р╕Зр╕Бр╕др╕йр╕бр╕▓р╣Бр╕кр╕Фр╕З)
    const optionQuery = `
      SELECT option_value_id, name, name_eng, extra_price
      FROM Option_Value 
      WHERE option_value_id IN (${allOptionIds.join(",")})
    `;

    db.all(optionQuery, (err2, optionRows) => {
      if (err2) {
        console.error(err2.message);
        return res.render("cart", { data: merged, lang });
      }

      // ЁЯФ╣ р╣Ар╕Хр╕┤р╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е option (р╕Кр╕╖р╣Ир╕н + р╕гр╕▓р╕Др╕▓р╣Ар╕Юр╕┤р╣Ир╕б) р╕Бр╕ер╕▒р╕Ър╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╣Ар╕бр╕Щр╕╣
      merged.forEach((m) => {
        m.options = m.rawOptions.map((o) => {
          const match = optionRows.find(
            (opt) => opt.option_value_id == o.option_value_id
          );
          return {
            name: match ? (lang === "th" ? match.name : match.name_eng) : "",
            extra_price: o.extra_price,
          };
        });

        // ЁЯФ╣ р╕Др╕│р╕Щр╕зр╕Ур╕гр╕▓р╕Др╕▓р╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╣Ар╕бр╕Щр╕╣ (base_price + options)
        const option_total = m.options.reduce(
          (sum, o) => sum + o.extra_price,
          0
        );
        m.final_price = m.base_price + option_total;
      });

      // тЬЕ р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Др╕Ыр╕лр╕Щр╣Йр╕▓ cart.ejs
      res.render("cart", { data: merged, lang });
    });
  });
});


// -------------------------------
//  path more (р╕лр╕Щр╣Йр╕▓р╣Ар╕ер╕╖р╕нр╕Б option р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣)
// -------------------------------
app.get("/more/:id", (req, res) => {
  // ЁЯФ╣ р╕Хр╕гр╕зр╕Ир╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б (р╣Др╕Чр╕в/р╕нр╕▒р╕Зр╕Бр╕др╕й)
  const lang = getLang(req);

  // ЁЯФ╣ р╕Бр╕│р╕лр╕Щр╕Фр╕зр╣Ир╕▓р╕Ир╕░р╣Гр╕Кр╣Йр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Др╕лр╕Щр╣Гр╕Щ DB р╕Хр╕▓р╕бр╕ар╕▓р╕йр╕▓
  const nameCol = lang === "th" ? "name_thai" : "name_eng";
  const detailCol = lang === "th" ? "detail" : "detail_eng";

  // ЁЯФ╣ query р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕бр╕Щр╕╣р╕Хр╕▓р╕б id р╕Чр╕╡р╣Ир╕Бр╕Фр╣Ар╕Вр╣Йр╕▓р╕бр╕▓ (р╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕н, р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф, р╕гр╕▓р╕Др╕▓ base)
  const queryMenu = `SELECT menu_item_id, category_id, ${nameCol} AS name, ${detailCol} AS detail, base_price, name_eng 
                     FROM MenuItem WHERE menu_item_id = ?`;

  // ЁЯФ╣ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕бр╕Щр╕╣р╕Ир╕▓р╕Б DB
  db.get(queryMenu, [req.params.id], (err, menu) => {
    if (err || !menu) 
      return res.status(404).send("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Ар╕бр╕Щр╕╣"); // р╕Цр╣Йр╕▓ error р╕лр╕гр╕╖р╕нр╕лр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕н

    // ЁЯФ╣ р╕лр╕▓ option group р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕Щр╕╡р╣Й (р╣Ар╕Кр╣Ир╕Щ р╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕кр╕╕р╕Б, р╣Ар╕ер╕╖р╕нр╕Бр╕Лр╕нр╕к, р╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Ар╕Др╕╡р╕вр╕З)
    db.all(
      "SELECT * FROM Option_Group WHERE menu_item_id = ?",
      [menu.menu_item_id],
      (err, groups) => {
        // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ option group тЖТ р╕кр╣Ир╕З options р╕зр╣Ир╕▓р╕Зр╣Др╕Ы render
        if (!groups || groups.length === 0)
          return res.render("more", { item: menu, options: [], lang });

        // ЁЯФ╣ р╕гр╕зр╕Ър╕гр╕зр╕б option_group_id р╕Вр╕нр╕Зр╣Ар╕бр╕Щр╕╣р╕Щр╕╡р╣Й р╣Ар╕Кр╣Ир╕Щ "1,2,3"
        const groupIds = groups.map((g) => g.option_group_id).join(",");

        // ЁЯФ╣ р╕Фр╕╢р╕З option values р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щ group р╣Ар╕лр╕ер╣Ир╕▓р╕Щр╕╡р╣Й р╣Ар╕Кр╣Ир╕Щ Rare, Medium, BBQ Sauce р╕пр╕ер╕п
        db.all(
          `SELECT * FROM Option_Value WHERE option_group_id IN (${groupIds})`,
          (err, values) => {
            if (err) 
              return res.render("more", { item: menu, options: [], lang });

            // ЁЯФ╣ р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Др╕гр╕З optionData = group + values р╕Вр╕нр╕Зр╕бр╕▒р╕Щ
            const optionData = groups.map((g) => ({
              ...g, // copy field р╕Вр╕нр╕З group р╣Ар╕Кр╣Ир╕Щ id, min_select, max_select
              // ЁЯФ╣ р╣Бр╕Ыр╕ер╕Кр╕╖р╣Ир╕н group р╕Хр╕▓р╕бр╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
              translated_name: lang === "th" ? g.name : g.name_eng,
              // ЁЯФ╣ р╣Гр╕кр╣И option values (р╣Бр╕Ыр╕ер╕Кр╕╖р╣Ир╕н option р╕Хр╕▓р╕бр╕ар╕▓р╕йр╕▓р╕Фр╣Йр╕зр╕в)
              values: values
                .filter((v) => v.option_group_id === g.option_group_id)
                .map((v) => ({
                  ...v,
                  translated_name: lang === "th" ? v.name : v.name_eng,
                })),
            }));

            // ЁЯФ╣ р╕кр╣Ир╕Зр╣Др╕Ы render р╕лр╕Щр╣Йр╕▓ more.ejs
            res.render("more", { item: menu, options: optionData, lang });
          }
        );
      }
    );
  });
});

// р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Ир╕│р╕Щр╕зр╕Щр╕кр╕┤р╕Щр╕Др╣Йр╕▓
app.post("/cart/update", (req, res) => {
  const { index, action } = req.body;
  if (!req.session.cart) req.session.cart = [];

  const i = parseInt(index);
  if (!isNaN(i) && req.session.cart[i]) {
    if (action === "increase") {
      req.session.cart[i].quantity += 1;
    } else if (action === "decrease") {
      req.session.cart[i].quantity -= 1;
      if (req.session.cart[i].quantity <= 0) {
        req.session.cart.splice(i, 1); // р╕Цр╣Йр╕▓р╕Хр╕┤р╕Фр╕ер╕Ъ тЖТ р╕ер╕Ър╕нр╕нр╕Б
      }
    }
  }
  res.redirect("/cart");
});

app.post("/cart/remove", (req, res) => {
  const { index } = req.body;
  if (!req.session.cart) req.session.cart = [];
  const i = parseInt(index);
  if (!isNaN(i)) {
    req.session.cart.splice(i, 1);
  }
  res.redirect("/cart");
});

// PUSH session -> DB (callback р╕ер╣Йр╕зр╕Щ, р╣Гр╕кр╣Ир╕гр╕▓р╕Др╕▓р╣Ар╕Ыр╣Зр╕Щ 0 р╣Др╕зр╣Йр╕Бр╣Ир╕нр╕Щр╣Гр╕лр╣Йр╣Ар╕гр╕╡р╕вр╕Ър╕Зр╣Ир╕▓р╕в)
app.post('/checkout', (req, res) => {
  const cart = req.session.cart || [];
  if (!cart.length) return res.redirect('/cart');

  const orderType = req.session.order_type || null; // тЖР р╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕Ир╕▓р╕Бр╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б

  db.serialize(() => {
    let rolled = false;
    const rb = (e) => { if (rolled) return; rolled = true; db.run('ROLLBACK', () => res.status(500).send('fail')); };

    db.run('BEGIN', (err) => {
      if (err) return rb(err);

      db.run(
        `INSERT INTO "Order"(order_type, queue_no, status) VALUES (?, NULL, 'PENDING')`,
        [orderType],                                     // << р╣Гр╕Кр╣Йр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
        function (err) {
          if (err) return rb(err);
          const orderId = this.lastID;

          let pending = 0;
          cart.forEach(it => pending += 1 + (Array.isArray(it.options) ? it.options.length : 0));
          if (!pending) return db.run('COMMIT', () => { req.session.cart = []; res.redirect('/kitchen'); });

          const done = () => {
            if (--pending === 0) db.run('COMMIT', () => {
              req.session.cart = [];
              // р╕Цр╣Йр╕▓р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕гр╕нр╕Ър╣Гр╕лр╕бр╣Ир╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╣Гр╕лр╕бр╣Ир╕Фр╣Йр╕зр╕в:
              // req.session.order_type = null;
              const redirectTo = req.body.redirect || '/kitchen';
              res.redirect(redirectTo);
            });
          };

          cart.forEach(it => {
            const qty = parseInt(it.quantity, 10) || 1;
            db.run(
              `INSERT INTO OrderItem(menu_item_id, order_id, quantity, unit_price, note)
               VALUES (?,?,?,?,?)`,
              [it.menu_item_id, orderId, qty, 0, it.note],        // р╕гр╕▓р╕Др╕▓ 0 р╣Др╕зр╣Йр╕Бр╣Ир╕нр╕Щ
              function (err) {
                if (err) return rb(err);
                const oiId = this.lastID; done();

                (Array.isArray(it.options) ? it.options : []).forEach(op => {
                  db.run(
                    `INSERT INTO OrderItemOption(order_item_id, option_value_id, extra_price)
                     VALUES (?,?,?)`,
                    [oiId, op.option_value_id, 0],       // р╕гр╕▓р╕Др╕▓р╣Ар╕Юр╕┤р╣Ир╕б 0 р╣Др╕зр╣Йр╕Бр╣Ир╕нр╕Щ
                    (err) => { if (err) return rb(err); done(); }
                  );
                });
              }
            );
          });
        }
      );
    });
  });
});

// р╕лр╕Щр╣Йр╕▓ list
app.get('/kitchen', (req, res) => {
  res.render('kitchen_list', { lang: getLang(req) });
});

// р╕лр╕Щр╣Йр╕▓ detail
app.get('/kitchen/:orderId', (req, res) => {
  res.render('kitchen_detail', { orderId: req.params.orderId, lang: getLang(req) });
});

// app.get('/api/kitchen', (req, res) => {
//   const status = (req.query.status || 'PENDING').toUpperCase(); // PENDING | DONE | ALL
//   const where = (status === 'ALL') ? '' : 'WHERE o.status = ?';
//   const params = (status === 'ALL') ? [] : [status];

//   const sql = `
//     SELECT 
//       o.order_id, o.order_type, o.status,
//       oi.order_item_id, oi.quantity,
//       m.name_thai AS item_name_th, m.name_eng AS item_name_en
//     FROM "Order" o
//     JOIN OrderItem oi ON oi.order_id = o.order_id
//     JOIN MenuItem  m  ON m.menu_item_id = oi.menu_item_id
//     ${where}
//     ORDER BY o.order_id ASC, oi.order_item_id ASC
//   `;
//   db.all(sql, params, (err, rows) => {
//     if (err) return res.status(500).json({ error: err.message });
//     res.json(rows);
//   });
// });

app.get('/api/kitchen', (req, res) => {
  const status = (req.query.status || 'PENDING').toUpperCase();
  const where = (status === 'ALL') ? '' : 'WHERE o.status = ?';
  const params = (status === 'ALL') ? [] : [status];

  const sql = `
    SELECT 
      o.order_id, o.order_type, o.status,
      oi.order_item_id, oi.quantity,
      m.category_id AS category_id,              -- тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ър╕гр╕гр╕Чр╕▒р╕Фр╕Щр╕╡р╣Й
      m.name_thai AS item_name_th, m.name_eng AS item_name_en
    FROM "Order" o
    JOIN OrderItem oi ON oi.order_id = o.order_id
    JOIN MenuItem  m  ON m.menu_item_id = oi.menu_item_id
    ${where}
    ORDER BY o.order_id ASC, oi.order_item_id ASC
  `;
  db.all(sql, params, (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});


// app.get('/api/kitchen/order/:orderId', (req, res) => {
//   const sql = `
//     SELECT 
//       o.order_id, o.order_type, o.status,
//       oi.order_item_id, oi.quantity, oi.note AS item_note
//       m.category_id AS category_id,              -- тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ър╕гр╕гр╕Чр╕▒р╕Фр╕Щр╕╡р╣Й
//       m.name_thai AS item_name_th, m.name_eng AS item_name_en,
      
//     (
//         SELECT GROUP_CONCAT(ov.name, ', ')
//         FROM OrderItemOption oio
//         JOIN Option_Value ov ON ov.option_value_id = oio.option_value_id
//         JOIN Option_Group og ON og.option_group_id = ov.option_group_id
//         WHERE oio.order_item_id = oi.order_item_id
//         ORDER BY og.option_group_id, ov.option_value_id 
//       ) AS options_text


//     FROM "Order" o
//     JOIN OrderItem oi ON oi.order_id = o.order_id
//     JOIN MenuItem  m  ON m.menu_item_id = oi.menu_item_id
//     WHERE o.order_id = ?
//     ORDER BY oi.order_item_id ASC
//   `;
//   db.all(sql, [req.params.orderId], (err, rows) =>
//     err ? res.status(500).json({ error: err.message }) : res.json(rows)
//   );
// });

// app.all('/api/kitchen/orders/:orderId/done', (req, res) => {
//   if (!['PATCH', 'POST'].includes(req.method)) return res.status(405).json({ error: 'Method not allowed' });
//   const id = parseInt(req.params.orderId, 10);
//   if (Number.isNaN(id)) return res.status(400).json({ error: 'bad orderId' });

//   db.run(`UPDATE "Order" SET status='DONE' WHERE order_id=?`, [id], function (err) {
//     if (err) return res.status(500).json({ error: err.message });
//     // this.changes = 0 р╕Цр╣Йр╕▓р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ DONE р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з
//     res.json({ ok: true, order_id: id, changes: this.changes });
//   });
// });

// GET one order (with item_note, category_id, options_text)
app.get('/api/kitchen/order/:orderId', (req, res) => {
  const id = parseInt(req.params.orderId, 10);
  if (Number.isNaN(id)) return res.status(400).json({ error: 'bad orderId' });

  const sql = `
    SELECT 
      o.order_id, o.order_type, o.status,
      oi.order_item_id, oi.quantity, 
      oi.note AS item_note,
      m.category_id AS category_id,
      m.name_thai AS item_name_th, 
      m.name_eng  AS item_name_en,
      (
        SELECT GROUP_CONCAT(og.name || ': ' || ov.name, ', ')
        FROM OrderItemOption oio
        JOIN Option_Value ov ON ov.option_value_id = oio.option_value_id
        JOIN Option_Group og ON og.option_group_id = ov.option_group_id
        WHERE oio.order_item_id = oi.order_item_id
        ORDER BY og.option_group_id, ov.option_value_id
      ) AS options_text
    FROM "Order" o
    JOIN OrderItem oi ON oi.order_id = o.order_id
    JOIN MenuItem  m  ON m.menu_item_id = oi.menu_item_id
    WHERE o.order_id = ?
    ORDER BY oi.order_item_id ASC
  `;

  db.all(sql, [id], (err, rows) => {
    if (err) {
      console.error('API /api/kitchen/order error:', {
        message: err.message, code: err.code, params: [id], sql
      });
      return res.status(500).json({ error: err.message, code: err.code });
    }
    res.json(rows);
  });
});

// PATCH/POST mark order DONE
app.all('/api/kitchen/orders/:orderId/done', (req, res) => {
  if (!['PATCH', 'POST'].includes(req.method)) {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  const id = parseInt(req.params.orderId, 10);
  if (Number.isNaN(id)) return res.status(400).json({ error: 'bad orderId' });

  const sql = `UPDATE "Order" SET status='DONE' WHERE order_id=?`;
  db.run(sql, [id], function (err) {
    if (err) {
      console.error('API /done error:', { message: err.message, code: err.code, params: [id], sql });
      return res.status(500).json({ error: err.message, code: err.code });
    }
    res.json({ ok: true, order_id: id, changes: this.changes });
  });
});


// Payment 
app.get('/payment', (req, res) => {
  // ЁЯФ╣ р╕Хр╕гр╕зр╕Ир╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Б (р╣Др╕Чр╕в/р╕нр╕▒р╕Зр╕Бр╕др╕й)
  const lang = getLang(req);
  
  res.render('payment', {
    paid: false,
    amount: 199.00,
    qrCodeUrl: "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=PAYMENT-DEMO",
    lang
  });
});

// р╕лр╕Щр╣Йр╕▓р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕Кр╕│р╕гр╕░р╣Ар╕Зр╕┤р╕Щр╣Ар╕кр╕гр╣Зр╕И
app.get('/payment/success', (req, res) => {
  const lang = getLang(req);

  res.render('payment', {
    paid: true,
    orderId: "123456",
    lang
  });
});


// р╕Кр╕▒р╣Ир╕зр╕Др╕гр╕▓р╕з: р╕Фр╕╣р╕кр╕Цр╕▓р╕Щр╕░р╣Бр╕ер╕░р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕▒р╕Ъ
app.get('/debug/kitchen', (req, res) => {
  db.serialize(() => {
    db.all(`SELECT order_id, status FROM "Order" ORDER BY order_id DESC LIMIT 5`, (e1, r1) => {
      db.all(`SELECT order_id, COUNT(*) as items FROM OrderItem GROUP BY order_id ORDER BY order_id DESC LIMIT 5`, (e2, r2) => {
        res.json({ orders: r1 || [], items: r2 || [], err1: e1 && e1.message, err2: e2 && e2.message });
      });
    });
  });
});